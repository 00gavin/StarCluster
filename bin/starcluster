#!/usr/bin/env python

import sys
import logging
from optparse import OptionParser
from optparse import OptionGroup
from optparse import OptionValueError
import starcluster
from starcluster import ec2utils 
from starcluster import s3utils 
from starcluster import starclustercfg as cfg

log = logging.getLogger('starcluster')

def run_start_cmd(args):
    """Runs the 'start' command"""
    startcmd_usage = "usage: %prog start [options]"
    startcmd = OptionParser(startcmd_usage)
    startcmd.add_option("-x","--no-create", dest="no_create",
    action="store_true", default=False, help="Do not launch new ec2 \
instances when starting cluster (uses existing instances instead)")
    startcmd.add_option("-m","--login-master", dest="login_master", 
    action="store_true", default=False, help="ssh to ec2 cluster master \
node after launch")
    (options, args) = startcmd.parse_args(args)
    log.debug('startcmd opts: %s' % options)
    log.debug('startcmd args: %s' % args)
    cfg.validate_or_exit()
    create = not options.no_create
    ec2utils.start_cluster(create=create)
    if options.login_master:
        ec2utils.ssh_to_master()

def run_stop_cmd(args):
    """Runs the 'stop' command"""
    stopcmd_usage = "usage: %prog stop"
    stopcmd = OptionParser(stopcmd_usage)
    (options, args) = stopcmd.parse_args(args)
    cfg.validate_aws_or_exit()
    ec2utils.stop_cluster()

def run_sshmaster_cmd(args):
    """Runs the 'sshmaster' command"""
    sshmastercmd_usage = "usage: %prog sshmaster"
    sshmastercmd = OptionParser(sshmastercmd_usage)
    (options, args) = sshmastercmd.parse_args(args)
    cfg.validate_aws_or_exit()
    ec2utils.ssh_to_master()

def run_sshnode_cmd(args):
    """Runs the 'sshnode' command"""
    sshnodecmd_usage = "usage: %prog sshnode node_number"
    sshnodecmd = OptionParser(sshnodecmd_usage)
    (options, args) = sshnodecmd.parse_args(args)
    if len(args) < 1:
        print_error('Please specify a node to connect to')
        sys.exit(1)
    node_number=args[0]
    cfg.validate_aws_or_exit()
    ec2utils.ssh_to_node(node_number)

def run_listnodes_cmd(args):
    """ Runs the 'listnodes' command """
    listnodescmd_usage = "usage: %prog listnodes"
    listnodescmd = OptionParser(listnodescmd_usage)
    (options, args) = listnodescmd.parse_args(args)
    cfg.validate_aws_or_exit()
    ec2utils.list_instances()

def run_listimages_cmd(args):
    """ Runs the 'listimages' command """
    listimagescmd_usage = "usage: %prog listimages"
    listimagescmd = OptionParser(listimagescmd_usage)
    (options, args) = listimagescmd.parse_args(args)
    cfg.validate_aws_or_exit()
    ec2utils.list_registered_images()

def run_listbuckets_cmd(args):
    """ Runs the 'listbuckets' command """
    listbucketscmd_usage = "usage: %prog listbuckets [options] bucket"
    listbucketscmd = OptionParser(listbucketscmd_usage)
    (options, args) = listbucketscmd.parse_args(args)
    cfg.validate_aws_or_exit()
    s3utils.list_buckets()

def run_showbucket_cmd(args):
    showbucketcmd_usage = "usage: %prog showbucket [options] [args]"
    showbucketcmd = OptionParser(showbucketcmd_usage)
    (options, args) = showbucketcmd.parse_args(args)
    if len(args) < 1:
        print_error('Please specify a bucket name')
        sys.exit(1)
    bucket = args[0]
    cfg.validate_aws_or_exit()
    s3utils.show_bucket_files(bucket)

def run_removeimage_cmd(args):
    removeimagecmd_usage = "usage: %prog removeimage [options] image"
    removeimagecmd = OptionParser(removeimagecmd_usage)
    removeimagecmd.add_option("-p","--pretend", dest="pretend", default=False, action="store_true", help="pretend run, don't really do anything")
    (options, args) = removeimagecmd.parse_args(args)
    if len(args) < 1:
        print_error('Please specify an AMI name or id')
        sys.exit(1)
    image = args[0]
    cfg.validate_aws_or_exit()
    ec2utils.remove_image(image, pretend=options.pretend)

def run_showimage_cmd(args):
    showimagecmd_usage = "usage: %prog showimage image"
    showimagecmd = OptionParser(showimagecmd_usage)
    (options, args) = showimagecmd.parse_args(args)
    if len(args) < 1:
        print_error('Please specify an AMI name or id')
        sys.exit(1)
    image = args[0]
    cfg.validate_aws_or_exit()
    ec2utils.list_image_files(image)

def run_listclusters_cmd(args):
    log.info("Not implemented yet...")

def run_createami_cmd(args):
    log.info("Not implemented yet...")

def run_createvolume_cmd(args):
    log.info("Not implemented yet...")

def show_help(args):
    get_option_parser().print_help()
    
# name, help, function
ACTIONS = [
    ('start', "Start a StarCluster cluster", run_start_cmd),
    ('stop', "Shutdown a StarCluster cluster", run_stop_cmd),
    ('sshmaster',"SSH to StarCluster master node", run_sshmaster_cmd),
    ('sshnode', "SSH to StarCluster node", run_sshnode_cmd),
    ('listclusters', "List all StarCluster clusters", run_listclusters_cmd),
    ('createami', "Create a new image (AMI) from a currently running EC2 instance", run_createami_cmd),
    ('createvolume', "Create a new EBS volume for use with StarCluster", run_createvolume_cmd),
    #('listnodes', "List all EC2 cluster nodes", run_listnodes_cmd),
    ('listimages', "List all registered EC2 images (AMIs)", run_listimages_cmd),
    ('listbuckets', "List all S3 buckets", run_listbuckets_cmd),
    ('showimage', "Show all files on S3 for an EC2 image (AMI)", run_showimage_cmd),
    ('showbucket', "Show all files in a S3 bucket", run_showbucket_cmd),
    ('removeimage', "Deregister an EC2 image (AMI) and remove it from S3", run_removeimage_cmd),
    ('help', "Show StarCluster usage", show_help),
]

def get_action_dict():
    action_dict = {}
    action_dict.update([ (action[0],action[2]) for action in ACTIONS ])
    return action_dict

def get_action_str():
    """ returns a str representation of available actions """
    labels = ['Action', 'Description']
    max_width = len(max(get_action_dict().keys(),key=len))
    actions_str = []
    tip_line = "(TIP: Pass -h to any action to see it's options)\n"
    actions_str.append(tip_line)
    label_line = ''.join([s.ljust(max_width+3) for s in labels])
    actions_str.append(label_line)
    divider_line = "=" * len(label_line)
    actions_str.append(divider_line)
    for action in ACTIONS:
        action_name = action[0].ljust(max_width)
        action_help = action[1]
        actions_str.append("%s - %s" % (action_name, action_help))
    return '\n'.join(actions_str)

def print_available_actions():
    print get_action_str()

def print_error(msg):
    sys.stderr.write('ERROR: ' + msg + '\n')

def print_action_error_msg(msg):
    print_error(msg)
    sys.stderr.write('\nPlease supply one of the following actions:\n\n')
    print_available_actions()

def get_option_parser():
    STARCLUSTER_USAGE = "usage: %prog action [options] [args] "
    parser = OptionParser(STARCLUSTER_USAGE, version="%prog "+starcluster.__version__)
    parser.disable_interspersed_args()
    parser.add_option("-l","--list-actions", dest="list_actions", action="store_true", default=False, help="list all currently available actions")
    parser.add_option("-d","--debug", dest="debug", action="store_true", default=False, help="print debug messages (may be useful for diagnosing problems)")
    return parser

def main():
    description = """
StarCluster - (http://web.mit.edu/starcluster)
Please submit bug reports to starcluster@mit.edu 
    """

    print description

    parser = get_option_parser()
    (options,args) = parser.parse_args() 

    if options.debug:
        log.setLevel(logging.DEBUG)

    if options.list_actions:
        print parser.get_usage()
        print_available_actions()
        sys.exit()

    if len(args) < 1:
        print_action_error_msg('You forgot to give me an action!')
        sys.exit(1)

    action = args[0]
    cmdstr = args[1:]
    actions = get_action_dict()

    try:
        run_action = actions[action]
        run_action(cmdstr)
    except KeyError, e:
        print_action_error_msg('Unknown action "%s"' % action)
        sys.exit(1)

if __name__ == "__main__":
    main()
