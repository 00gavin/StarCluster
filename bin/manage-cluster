#!/usr/bin/env python

import logging
from optparse import OptionParser
from optparse import OptionValueError
from starcluster import ec2utils 
from starcluster import starclustercfg as cfg

log = logging.getLogger('starcluster')

def positive_int(option, opt_str, value, parser):
    err_msg = "-n option must be a positive integer greater than 0\n"
    try:
        intval = int(value)
        if intval < 0:
            log.error(err_msg)
            return
        parser.values.login_node = value
    except Exception,e:
        log.error(err_msg)

def main():
    description = """
StarCluster - (http://web.mit.edu/stardev/cluster)
Author: justin.t.riley@gmail.com
Please submit bug reports to star@mit.edu 

manage-cluster 
    """

    print description

    usage = "usage: %prog [options]"

    parser = OptionParser(usage)

    parser.add_option("-s","--start-cluster", dest="start_cluster", action="store_true", default=False, help="start an amazon ec2 cluster")
    parser.add_option("-t","--terminate-cluster", dest="terminate_cluster", action="store_true", default=False, help="shutdown ec2 cluster")
    parser.add_option("-x","--no-create", dest="no_create", action="store_true", default=False, help="same as -s but does not launch new ec2 instances when starting cluster (mostly for debug)")
    parser.add_option("-m","--login-master", dest="login_master", action="store_true", default=False, help="ssh to ec2 cluster master node (equivalent to -n 0")
    parser.add_option("-l","--list-nodes", dest="list_nodes", action="store_true", default=False, help="list all ec2 cluster nodes")
    parser.add_option("-n","--login-node", action="callback", dest="login_node",  type="string", default=False, callback=positive_int, help="node number to ssh to. (from output of -l option)")
    parser.add_option("-d","--debug", dest="debug", action="store_true", default=False, help="print debug messages (may be useful for diagnosing problems)")

    (options,args) = parser.parse_args() 


    if options.debug:
        log.setLevel(logging.DEBUG)

    log.debug("options = %s" % options)

    if options.start_cluster or options.no_create:
        cfg.validate_or_exit()
        create = not options.no_create
        ec2utils.start_cluster(create=create)
        if options.login_master:
            ec2utils.ssh_to_master()
    elif options.terminate_cluster:
        cfg.validate_aws_or_exit()
        ec2utils.stop_cluster()
    elif options.login_master:
        cfg.validate_aws_or_exit()
        ec2utils.ssh_to_master()
    elif options.list_nodes:
        cfg.validate_aws_or_exit()
        ec2utils.list_instances()
    elif options.login_node:
        cfg.validate_aws_or_exit()
        ec2utils.ssh_to_node(options.login_node)
    else:
        parser.print_help()
    
if __name__ == "__main__":
    main()
